
#2017-07-18 14:34:28 +0800
#require_relative ".././tdl"
require_relative '..\..\tdl\tdl'

class AxiStream


    def axis_connect_pipe(dsize:32,axis_in:"axis_in",axis_out:"axis_out",up_stream:nil,down_stream:nil)
        return_stream = self

        if up_stream==nil && axis_in=="axis_in"
            up_stream = self.copy(name:"axis_in")
            return_stream = up_stream
        end

        axis_in = up_stream if up_stream
        axis_out = self

        $_draw = lambda { axis_connect_pipe_draw(dsize:dsize,axis_in:axis_in,axis_out:axis_out,up_stream:up_stream,down_stream:down_stream) }
        @correlation_proc += $_draw.call
        return return_stream
    end

    def axis_connect_pipe_draw(dsize:32,axis_in:"axis_in",axis_out:"axis_out",up_stream:nil,down_stream:nil)
        large_name_len(dsize,axis_in,axis_out)
"
axis_connect_pipe#(
    .DSIZE    (#{align_signal(dsize,q_mark=false)})
) axis_connect_pipe_#{signal}_inst(
/*  axi_stream_inf.slaver*/ .axis_in  (#{align_signal(axis_in,q_mark=false)}),
/*  axi_stream_inf.master*/ .axis_out (#{align_signal(axis_out,q_mark=false)})
);
"
    end

    def self.axis_connect_pipe(dsize:32,axis_in:"axis_in",axis_out:"axis_out",up_stream:nil,down_stream:nil)
        return_stream = nil

        if down_stream==nil && axis_out=="axis_out"
            if up_stream.is_a? AxiStream
                down_stream = up_stream.copy(name:"axis_out")
            else
                down_stream = axis_in.copy(name:"axis_out")
            end
            return_stream = down_stream
        end


        if up_stream==nil && axis_in=="axis_in"
            if down_stream.is_a? AxiStream
                up_stream = down_stream.copy(name:"axis_in")
            else
                up_stream = axis_out.copy(name:"axis_in")
            end
            return_stream = up_stream
        end


        if down_stream.is_a? AxiStream
            down_stream.axis_connect_pipe(dsize:dsize,axis_in:axis_in,axis_out:axis_out,up_stream:up_stream,down_stream:down_stream)
        elsif axis_out.is_a? AxiStream
            axis_out.axis_connect_pipe(dsize:dsize,axis_in:axis_in,axis_out:axis_out,up_stream:up_stream,down_stream:down_stream)
        else
            NC.axis_connect_pipe(dsize:dsize,axis_in:axis_in,axis_out:axis_out,up_stream:up_stream,down_stream:down_stream)
        end
        return return_stream
    end


end


class TdlTest

    def self.test_axis_connect_pipe
        c0 = Clock.new(name:"axis_connect_pipe_clk",freqM:148.5)
        r0 = Reset.new(name:"axis_connect_pipe_rst_n",active:"low")

        Parameter.new(name:"dsize",value:32)
        Parameter.new(name:"ksize",value:"(DSIZE/8 > 0)? DSIZE/8 : 1")
        AxiStream.new(name:"axis_in",clock:c0,reset:r0)
        AxiStream.new(name:"axis_out",clock:c0,reset:r0)
        up_stream = axis_in
        down_stream = axis_out
        AxiStream.axis_connect_pipe(dsize:dsize,ksize:ksize,axis_in:axis_in,axis_out:axis_out)

        puts_sv Tdl.inst,Tdl.draw
    end

end

class Tdl

    def Tdl.inst_axis_connect_pipe(dsize:32,
        ksize:"(DSIZE/8 > 0)? DSIZE/8 : 1",
        axis_in:"axis_in",
        axis_out:"axis_out")
        hash = TdlHash.new

        unless dsize.is_a? Hash
            # hash.new_index(:dsize) = dsize
            if dsize.is_a? BaseElm
                hash.[]=(:dsize,dsize,true)
            else
                hash.[]=(:dsize,dsize,false)
            end
        else
            # hash.new_index(:dsize)= lambda { a = Parameter.new(dsize);a.name = "dsize";return a }
            # hash[:dsize] = lambda { a = Parameter.new(dsize);a.name = "dsize";return a }
            lam = lambda {
                a = Parameter.new(dsize)
                unless dsize[:name]
                    a.name = "dsize"
                end
                return a }
            hash.[]=(:dsize,lam,false)
        end


        unless ksize.is_a? Hash
            # hash.new_index(:ksize) = ksize
            if ksize.is_a? BaseElm
                hash.[]=(:ksize,ksize,true)
            else
                hash.[]=(:ksize,ksize,false)
            end
        else
            # hash.new_index(:ksize)= lambda { a = Parameter.new(ksize);a.name = "ksize";return a }
            # hash[:ksize] = lambda { a = Parameter.new(ksize);a.name = "ksize";return a }
            lam = lambda {
                a = Parameter.new(ksize)
                unless ksize[:name]
                    a.name = "ksize"
                end
                return a }
            hash.[]=(:ksize,lam,false)
        end


        unless axis_in.is_a? Hash
            # hash.new_index(:axis_in) = axis_in
            if axis_in.is_a? BaseElm
                hash.[]=(:axis_in,axis_in,true)
            else
                hash.[]=(:axis_in,axis_in,false)
            end
        else
            # hash.new_index(:axis_in)= lambda { a = AxiStream.new(axis_in);a.name = "axis_in";return a }
            # hash[:axis_in] = lambda { a = AxiStream.new(axis_in);a.name = "axis_in";return a }
            lam = lambda {
                a = AxiStream.new(axis_in)
                unless axis_in[:name]
                    a.name = "axis_in"
                end
                return a }
            hash.[]=(:axis_in,lam,false)
        end


        unless axis_out.is_a? Hash
            # hash.new_index(:axis_out) = axis_out
            if axis_out.is_a? BaseElm
                hash.[]=(:axis_out,axis_out,true)
            else
                hash.[]=(:axis_out,axis_out,false)
            end
        else
            # hash.new_index(:axis_out)= lambda { a = AxiStream.new(axis_out);a.name = "axis_out";return a }
            # hash[:axis_out] = lambda { a = AxiStream.new(axis_out);a.name = "axis_out";return a }
            lam = lambda {
                a = AxiStream.new(axis_out)
                unless axis_out[:name]
                    a.name = "axis_out"
                end
                return a }
            hash.[]=(:axis_out,lam,false)
        end


        Tdl.module_stack  << lambda {
            hash.each do |k,v|
                if v.is_a? Proc
                    hash.[]=(k,v.call,false)
                elsif v.is_a? Array
                    unless v.empty?
                        if v[0].is_a? Axi4
                            cm = v[0].copy(name:k,idsize:Math.log2(v.length).ceil+v[0].idsize)
                        else
                            cm = v[0].copy(name:k)
                        end
                        cm.<<(*v)
                        # hash[k] = cm
                        hash.[]=(k,cm)
                    else
                        hash.[]=(k,nil,false)
                    end
                else
                    # hash[k] = v
                end
            end
            hash.check_use("axis_connect_pipe")
            AxiStream.axis_connect_pipe(hash)
        }
        return hash
    end
end
